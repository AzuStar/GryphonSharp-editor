<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">

    <!--- Libs --->
    <script nonce="Efry143hcm1vxaR0p7zL7T18ahnFMv5u" src="vscode-webview-resource://f4161eb1-7c24-407d-a4fe-da6f2949cbb8/file///c%3A/Users/kilanth/Documents/.git/typescript/gryphonsharp-vscode/media/jslib/Konva.js"></script>

    <meta http-equiv="Content-Security-Policy"
        content="default-src 'none'; img-src vscode-webview-resource:; style-src vscode-webview-resource:; script-src 'nonce-Efry143hcm1vxaR0p7zL7T18ahnFMv5u';">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="vscode-webview-resource://f4161eb1-7c24-407d-a4fe-da6f2949cbb8/file///c%3A/Users/kilanth/Documents/.git/typescript/gryphonsharp-vscode/media/css/test.css" rel="stylesheet" />

    <title>Cat Scratch</title>
</head>

<body>
    <div id="editor-main">
    </div>
    <script nonce="Efry143hcm1vxaR0p7zL7T18ahnFMv5u ">/* eslint-disable curly */
/* eslint-disable eqeqeq */

// @ts-ignore
const vscode = acquireVsCodeApi();
const PANEL_WIDTH = 150;
const METHOD_TXT_PAD_LEFT = 15;
const CONNECTOR_PAD_HORIZONTAL = 10;
const METHOD_TXT_PAD_BOT = 10;
const METHOD_TXT_FONT_SIZE = 16;
const CONNECTOR_TXT_FONT_SIZE = 13;
const CONNECTOR_TXT_WIDTH = PANEL_WIDTH / 3;
const CONNECTOR_RADIUS = 4.5;
const CONNECTOR_PAD_TOP = 8;
const BODY_PANEL_COLOR = '#000000';
const METHOD_PANEL_OPACITY = 0.6;
const BODY_PANEL_OPACITY = 0.4;
var width = window.innerWidth;
var height = window.innerHeight;
var stageLeftButton;
var stageContextMenu;
var stageBackgroundSizes = [100, 20];
// var 
var stage = new Konva.Stage({
    container: 'editor-main',
    width: width,
    height: height,
    draggable: true,
});
stage.container().style.backgroundImage = "linear-gradient(rgba(255,255,255,0.2) 1.3px, transparent 2px),linear-gradient(90deg, rgba(255,255,255,0.2) 1.3px, transparent 1px),linear-gradient(rgba(255,255,255,0.1) 0.8px, transparent 1px),linear-gradient(90deg, rgba(255,255,255,.1) 0.8px, transparent 1px)";
stage.container().style.backgroundSize = `${stageBackgroundSizes[0]}px ${stageBackgroundSizes[0]}px, ${stageBackgroundSizes[0]}px ${stageBackgroundSizes[0]}px, ${stageBackgroundSizes[1]}px ${stageBackgroundSizes[1]}px, ${stageBackgroundSizes[1]}px ${stageBackgroundSizes[1]}px`;
// stage.container().style.backgroundPosition = "-2px -2px, -2px -2px, -1px -1px, -1px -1px";
Konva.angleDeg = false;
Konva.dragButtons = [0, 2];
var layer = new Konva.Layer({
    existingNodesCount: 0,
});
stage.add(layer);
class MethodSignature {
}
class ArgumentSignature {
}
class ReturnSignature {
}
function createNode(x, y, signature) {
    var nodeid = "node-" + stage.getAttr("existingNodesCount");
    var nodeFullId = nodeid + "-nt-0-af-0-rf-0";
    layer.setAttr("existingNodesCount", layer.getAttr("existingNodesCount") + 1);
    var node = new Konva.Group({
        id: nodeFullId,
        x: x,
        y: y,
        draggable: true,
        connectorCount: 0,
        signature: signature,
    });
    node.on('mousedown', (e) => {
        var left = e.evt.button === 0;
        node.draggable(left);
    });
    var methodText = new Konva.Text({
        y: CONNECTOR_PAD_TOP,
        text: signature.methodName,
        fontSize: METHOD_TXT_FONT_SIZE,
        fontFamily: 'Calibri',
        align: 'left',
        x: METHOD_TXT_PAD_LEFT / 2,
        ellipsis: true,
        width: PANEL_WIDTH,
        height: METHOD_TXT_FONT_SIZE,
        wrap: 'none'
    });
    var methodNamePanel = new Konva.Rect({
        width: PANEL_WIDTH,
        height: methodText.height() + methodText.y() + METHOD_TXT_PAD_BOT,
        fill: BODY_PANEL_COLOR,
        cornerRadius: [6, 6, 0, 0],
        opacity: METHOD_PANEL_OPACITY,
    });
    var bodyGroup = new Konva.Group({
        y: methodNamePanel.height(),
    });
    var bodyHeight = 20;
    if (signature.args != null && signature.args.length > 0)
        bodyHeight = signature.args.length * (CONNECTOR_RADIUS * 2 + CONNECTOR_PAD_TOP);
    if (signature.returns != null && signature.returns.length > 0) {
        var hee = signature.returns.length * (CONNECTOR_RADIUS * 2 + CONNECTOR_PAD_TOP);
        if (bodyHeight < hee)
            bodyHeight = hee;
    }
    var bodyPanel = new Konva.Rect({
        width: PANEL_WIDTH,
        height: bodyHeight,
        cornerRadius: [0, 0, 6, 6],
        fill: BODY_PANEL_COLOR,
        opacity: BODY_PANEL_OPACITY,
    });
    //#region 
    // argument connectors
    if (signature.args != null) {
        var connectorCircle, yOffset = CONNECTOR_PAD_TOP, connectorText;
        signature.args.forEach(element => {
            var connectorGroup = new Konva.Group({
                id: nodeid + "-cid-" + node.getAttr("connectorCount"),
                y: yOffset,
                x: CONNECTOR_PAD_HORIZONTAL,
            });
            node.setAttr("connectorCount", node.getAttr("connectorCount") + 1);
            connectorText = new Konva.Text({
                // y: -(CONNECTOR_RADIUS + CONNECTOR_PAD_TOP)/2,
                text: element.name,
                fontSize: CONNECTOR_TXT_FONT_SIZE,
                fontFamily: 'Calibri',
                align: 'left',
                x: CONNECTOR_PAD_HORIZONTAL * 0.5 + CONNECTOR_RADIUS * 2,
                ellipsis: true,
                width: CONNECTOR_TXT_WIDTH,
                height: CONNECTOR_RADIUS * 1,
                wrap: 'none',
                offsetY: (CONNECTOR_RADIUS + CONNECTOR_PAD_TOP) / 2
            });
            connectorCircle = new Konva.Circle({
                // x: CONNECTOR_PAD_LEFT,
                fill: '#cc0000',
                radius: CONNECTOR_RADIUS,
                stroke: '#000000',
                strokeWidth: 0.4,
            });
            yOffset += CONNECTOR_RADIUS * 2 + CONNECTOR_PAD_TOP;
            connectorCircle.on('mousedown', (e) => {
            });
            connectorGroup.add(connectorCircle);
            connectorGroup.add(connectorText);
            bodyGroup.add(connectorGroup);
        });
    }
    //#endregion
    //#region 
    // return connectors
    if (signature.returns != null) {
        var connectorCircle, yOffset = CONNECTOR_PAD_TOP, connectorText;
        signature.returns.forEach(element => {
            var connectorGroup = new Konva.Group({
                id: nodeid + "-cid-" + node.getAttr("connectorCount"),
                y: yOffset,
                x: PANEL_WIDTH - CONNECTOR_PAD_HORIZONTAL,
            });
            node.setAttr("connectorCount", node.getAttr("connectorCount") + 1);
            connectorText = new Konva.Text({
                // y: -(CONNECTOR_RADIUS + CONNECTOR_PAD_TOP)/2,
                text: element.name,
                fontSize: CONNECTOR_TXT_FONT_SIZE,
                fontFamily: 'Calibri',
                align: 'right',
                x: -(CONNECTOR_PAD_HORIZONTAL * 0.5 + CONNECTOR_RADIUS * 2 + CONNECTOR_TXT_WIDTH),
                ellipsis: true,
                width: CONNECTOR_TXT_WIDTH,
                height: CONNECTOR_RADIUS * 1,
                wrap: 'none',
                offsetY: (CONNECTOR_RADIUS + CONNECTOR_PAD_TOP) / 2
            });
            connectorCircle = new Konva.Circle({
                // x: CONNECTOR_PAD_LEFT,
                fill: '#cc00aa',
                radius: CONNECTOR_RADIUS,
                stroke: '#000000',
                strokeWidth: 0.4,
            });
            yOffset += CONNECTOR_RADIUS * 2 + CONNECTOR_PAD_TOP;
            connectorGroup.add(connectorCircle);
            connectorGroup.add(connectorText);
            bodyGroup.add(connectorGroup);
        });
    }
    //#endregion
    // node.on();
    node.add(methodNamePanel);
    node.add(methodText);
    node.add(bodyGroup);
    bodyGroup.add(bodyPanel);
    return node;
}
layer.add(createNode(50, 50, {
    methodName: "Main",
    args: [],
}));
layer.add(createNode(200, 200, {
    methodName: "SystemOutput",
    args: [
        { name: "out" }, { name: "test" }, { name: "number" },
        { name: "extra1" }, { name: "extra2" }, { name: "extra3" },
        { name: "extra1" }, { name: "extra2" }, { name: "extra3" },
        { name: "extra1" }, { name: "extra2" }, { name: "extra3" },
    ],
    returns: [
        { name: "return" }
    ],
}));
layer.draw();
var scaleBy = 1.03;
stage.on('wheel', (e) => {
    e.evt.preventDefault();
    var oldScale = stage.scaleX();
    var oldBgScale = stageBackgroundSizes;
    var pointer = stage.getPointerPosition();
    if (pointer !== null) {
        var mousePointTo = {
            x: (pointer.x - stage.x()) / oldScale,
            y: (pointer.y - stage.y()) / oldScale,
        };
        var newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;
        stage.scale({ x: newScale, y: newScale });
        var newPos = {
            x: pointer.x - mousePointTo.x * newScale,
            y: pointer.y - mousePointTo.y * newScale,
        };
        stage.position(newPos);
        stageBackgroundSizes[0] = 100 * newScale;
        // stageBackgroundSizes[1] = 100 * newScale;
        stage.container().style.backgroundSize = `${stageBackgroundSizes[0]}px ${stageBackgroundSizes[0]}px, ${stageBackgroundSizes[0]}px ${stageBackgroundSizes[0]}px, ${stageBackgroundSizes[1]}px ${stageBackgroundSizes[1]}px, ${stageBackgroundSizes[1]}px ${stageBackgroundSizes[1]}px`;
    }
    stage.batchDraw();
});
stage.on('contextmenu', (e) => {
    e.evt.preventDefault();
});
stage.on('mousedown', (e) => {
    stageLeftButton = e.evt.button === 0;
    stage.draggable(!stageLeftButton);
});
stage.on('dragmove', (e) => {
    // stageContextMenu.destroy();
    if (!stageLeftButton) {
        const pointerpos = stage.pointerPos;
        if (pointerpos !== null)
            stage.container().style.backgroundPosition = `${pointerpos.x}px ${pointerpos.y}px`;
    }
});
stage.on('click', (e) => {
    var isRight = e.evt.button === 2;
    if (isRight) {
        console.log("menu");
        stageContextMenu = new Konva.Group({});
    }
});
//# sourceMappingURL=nodeEditor.js.map</script>
<script nonce="Efry143hcm1vxaR0p7zL7T18ahnFMv5u ">"use strict";
//# sourceMappingURL=utils.js.map</script>
<script nonce="Efry143hcm1vxaR0p7zL7T18ahnFMv5u ">"use strict";
(function () {
});
//# sourceMappingURL=vscode.js.map</script>
</body>

</html>